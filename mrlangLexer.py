# Generated from mrlang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,269,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,5,14,176,8,14,10,14,12,14,179,9,14,1,15,4,
        15,182,8,15,11,15,12,15,183,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,3,16,195,8,16,1,17,1,17,5,17,199,8,17,10,17,12,17,202,9,
        17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,
        27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,4,31,239,8,31,11,
        31,12,31,240,1,31,1,31,1,32,1,32,1,32,1,32,5,32,249,8,32,10,32,12,
        32,252,9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,260,8,33,10,33,12,
        33,263,9,33,1,33,1,33,1,33,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,6,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,1,0,13,13,275,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,
        84,1,0,0,0,11,94,1,0,0,0,13,103,1,0,0,0,15,112,1,0,0,0,17,121,1,
        0,0,0,19,130,1,0,0,0,21,137,1,0,0,0,23,149,1,0,0,0,25,155,1,0,0,
        0,27,162,1,0,0,0,29,173,1,0,0,0,31,181,1,0,0,0,33,194,1,0,0,0,35,
        196,1,0,0,0,37,205,1,0,0,0,39,207,1,0,0,0,41,209,1,0,0,0,43,211,
        1,0,0,0,45,213,1,0,0,0,47,215,1,0,0,0,49,218,1,0,0,0,51,221,1,0,
        0,0,53,223,1,0,0,0,55,226,1,0,0,0,57,229,1,0,0,0,59,232,1,0,0,0,
        61,234,1,0,0,0,63,238,1,0,0,0,65,244,1,0,0,0,67,255,1,0,0,0,69,70,
        5,40,0,0,70,2,1,0,0,0,71,72,5,41,0,0,72,4,1,0,0,0,73,74,5,59,0,0,
        74,6,1,0,0,0,75,76,5,115,0,0,76,77,5,99,0,0,77,78,5,104,0,0,78,79,
        5,101,0,0,79,80,5,116,0,0,80,81,5,110,0,0,81,82,5,111,0,0,82,83,
        5,101,0,0,83,8,1,0,0,0,84,85,5,115,0,0,85,86,5,108,0,0,86,87,5,111,
        0,0,87,88,5,118,0,0,88,89,5,101,0,0,89,90,5,115,0,0,90,91,5,110,
        0,0,91,92,5,111,0,0,92,93,5,101,0,0,93,10,1,0,0,0,94,95,5,100,0,
        0,95,96,5,118,0,0,96,97,5,111,0,0,97,98,5,121,0,0,98,99,5,97,0,0,
        99,100,5,107,0,0,100,101,5,111,0,0,101,102,5,101,0,0,102,12,1,0,
        0,0,103,104,5,112,0,0,104,105,5,111,0,0,105,106,5,118,0,0,106,107,
        5,101,0,0,107,108,5,100,0,0,108,109,5,97,0,0,109,110,5,116,0,0,110,
        111,5,105,0,0,111,14,1,0,0,0,112,113,5,115,0,0,113,114,5,116,0,0,
        114,115,5,97,0,0,115,116,5,114,0,0,116,117,5,116,0,0,117,118,5,117,
        0,0,118,119,5,101,0,0,119,120,5,109,0,0,120,16,1,0,0,0,121,122,5,
        107,0,0,122,123,5,111,0,0,123,124,5,110,0,0,124,125,5,99,0,0,125,
        126,5,104,0,0,126,127,5,97,0,0,127,128,5,101,0,0,128,129,5,109,0,
        0,129,18,1,0,0,0,130,131,5,101,0,0,131,132,5,122,0,0,132,133,5,104,
        0,0,133,134,5,101,0,0,134,135,5,108,0,0,135,136,5,105,0,0,136,20,
        1,0,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,97,0,0,140,
        141,5,107,0,0,141,142,5,111,0,0,142,143,5,101,0,0,143,144,5,122,
        0,0,144,145,5,104,0,0,145,146,5,101,0,0,146,147,5,108,0,0,147,148,
        5,105,0,0,148,22,1,0,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,
        152,5,97,0,0,152,153,5,107,0,0,153,154,5,111,0,0,154,24,1,0,0,0,
        155,156,5,100,0,0,156,157,5,111,0,0,157,158,5,107,0,0,158,159,5,
        111,0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,26,1,0,0,0,162,163,
        5,107,0,0,163,164,5,114,0,0,164,165,5,117,0,0,165,166,5,103,0,0,
        166,167,5,111,0,0,167,168,5,118,0,0,168,169,5,101,0,0,169,170,5,
        114,0,0,170,171,5,116,0,0,171,172,5,121,0,0,172,28,1,0,0,0,173,177,
        7,0,0,0,174,176,7,1,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,
        1,0,0,0,177,178,1,0,0,0,178,30,1,0,0,0,179,177,1,0,0,0,180,182,7,
        2,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,
        0,0,0,184,32,1,0,0,0,185,186,5,100,0,0,186,187,5,111,0,0,187,188,
        5,98,0,0,188,189,5,114,0,0,189,195,5,111,0,0,190,191,5,108,0,0,191,
        192,5,122,0,0,192,193,5,104,0,0,193,195,5,97,0,0,194,185,1,0,0,0,
        194,190,1,0,0,0,195,34,1,0,0,0,196,200,5,34,0,0,197,199,8,3,0,0,
        198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,
        201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,34,0,0,204,36,1,0,0,0,
        205,206,5,42,0,0,206,38,1,0,0,0,207,208,5,47,0,0,208,40,1,0,0,0,
        209,210,5,43,0,0,210,42,1,0,0,0,211,212,5,45,0,0,212,44,1,0,0,0,
        213,214,5,61,0,0,214,46,1,0,0,0,215,216,5,61,0,0,216,217,5,61,0,
        0,217,48,1,0,0,0,218,219,5,33,0,0,219,220,5,61,0,0,220,50,1,0,0,
        0,221,222,5,60,0,0,222,52,1,0,0,0,223,224,5,38,0,0,224,225,5,38,
        0,0,225,54,1,0,0,0,226,227,5,124,0,0,227,228,5,124,0,0,228,56,1,
        0,0,0,229,230,5,60,0,0,230,231,5,61,0,0,231,58,1,0,0,0,232,233,5,
        62,0,0,233,60,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,0,236,62,1,
        0,0,0,237,239,7,4,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,
        0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,6,31,0,0,243,64,1,
        0,0,0,244,245,5,47,0,0,245,246,5,47,0,0,246,250,1,0,0,0,247,249,
        8,3,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,
        1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,6,32,0,0,254,66,
        1,0,0,0,255,256,5,47,0,0,256,257,5,42,0,0,257,261,1,0,0,0,258,260,
        8,5,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,
        1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,265,5,42,0,0,265,266,
        5,47,0,0,266,267,1,0,0,0,267,268,6,33,0,0,268,68,1,0,0,0,8,0,177,
        183,194,200,240,250,261,1,6,0,0
    ]

class mrlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    ID = 15
    NUM = 16
    BOOL = 17
    STRING = 18
    MUL = 19
    SLASH = 20
    PLUS = 21
    MINUS = 22
    ASSIGN = 23
    EQUAL = 24
    NOT_EQUAL = 25
    LESS = 26
    AND = 27
    OR = 28
    LESS_OR_EQUAL = 29
    GREATER = 30
    GREATER_OR_EQUAL = 31
    SPACE = 32
    LINE_COMMENT = 33
    MULTILINE_COMMENT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "';'", "'schetnoe'", "'slovesnoe'", "'dvoyakoe'", 
            "'povedati'", "'startuem'", "'konchaem'", "'ezheli'", "'inakoezheli'", 
            "'inako'", "'dokole'", "'krugoverty'", "'*'", "'/'", "'+'", 
            "'-'", "'='", "'=='", "'!='", "'<'", "'&&'", "'||'", "'<='", 
            "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "BOOL", "STRING", "MUL", "SLASH", "PLUS", "MINUS", 
            "ASSIGN", "EQUAL", "NOT_EQUAL", "LESS", "AND", "OR", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "SPACE", "LINE_COMMENT", "MULTILINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "ID", "NUM", "BOOL", "STRING", "MUL", "SLASH", "PLUS", 
                  "MINUS", "ASSIGN", "EQUAL", "NOT_EQUAL", "LESS", "AND", 
                  "OR", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "SPACE", "LINE_COMMENT", "MULTILINE_COMMENT" ]

    grammarFileName = "mrlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


